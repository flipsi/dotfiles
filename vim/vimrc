" Author: Philipp Moers <soziflip@gmail.com>
"
" ~/.vimrc




""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SETTINGS (not plugin specific)


" we use vim, not vi
set nocompatible

" set timeout for escape sequences
" (so that leaving insert mode does not last that long)
set timeout ttimeoutlen=50
" but mapping delay can be more
set timeoutlen=1200

" encoding should be utf-8 on every OS
set     encoding=utf-8
set fileencoding=utf-8

" reload files changed outside vim
" (still have to change buffer or so)
set autoread

" command history size
set history=9999

" syntax highlighting
syntax on

" line numbers
set number
set relativenumber
set numberwidth=6

" highlight current line
set cursorline

" statusline
set statusline="%f%m%r%h%w [%Y] [0x%02.2B]%< %F%=%4v,%4l %3p%% of %L"
set showcmd
set ruler

" completions behaviour
set wildmode=longest,full
set wildmenu

" scrolling
" start scrolling when we're 8 lines away from margins
set scrolloff=8
set sidescrolloff=15
set sidescroll=1

" search preferences
set incsearch
set ignorecase
set smartcase
" never have to append 'g' to a search/substitute again
set gdefault

" characters to show in list mode (like whitespace)
" and wrap symbols that are always shown
set listchars=space:·,tab:--,extends:>,precedes:<

" use 4 spaces instead of tabs
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4

" indent after open braces etc
set autoindent
set smartindent
set smarttab

" allow to :edit multiple files in buffers without writing changes
set hidden

" puts new split windows to the bottom of the current
set splitbelow
" puts new vsplit windows to the right of the current
set splitright





""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FUNCTIONS


" function to set cwd to filepath ----{{{
function! SetCwdToFilePath()
    execute "cd " . expand('%:p:h')
endfunction
" }}}






""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" KEYBINDINGS (not plugin specific)


" mappings with the alt key should be done twice:
"      - with <Esc>* for terminal sequences, and
"      - with <M-*>  for gvim


" leader key is space
let mapleader=' '
let maplocalleader=' '



""""""""""
" GENERAL


" (for compatibility)
nnoremap <C-G><C-G> <C-G>

" open config file
"nnoremap <leader>ev :edit ~/.vimrc<CR>
" (use absolute path to dotfiles, not symlink for ctrlp)
nnoremap <leader>ev :edit ~/dotfiles/vim/vimrc<CR>
nnoremap <leader>e3 :edit ~/dotfiles/i3/config<CR>

" reload config file
nnoremap <leader>sv :source ~/.vimrc<CR>
nnoremap <F5>       :source ~/.vimrc<CR>

" open help in vertical window
cnoreabbrev <expr> h ((getcmdtype() is# ':' && getcmdline() is# 'h')?('vertical help'):('h'))

" to follow links in help
nnoremap <M-Return>    <C-]>
nnoremap <Esc><Return> <C-]>


" close file (not window)
nnoremap q :bdelete<CR>

" quit window
nnoremap Q :quit<CR>

" quit vim (mulitple windows)
nnoremap <C-D> :quitall<CR>


" save changes without quit
nnoremap <M-s>  :write<CR>
nnoremap <Esc>s :write<CR>


" record macro ('complex repeat')
nnoremap <leader>M q
" replay macro ('complex repeat')
nnoremap <leader>m @


" abort command in ex mode
cnoremap <C-g>  <C-c>


" scroll (alt key)
noremap <M-j>  <C-D>
noremap <Esc>j <C-D>
noremap <M-k>  <C-U>
noremap <Esc>k <C-U>

" toggle line numbers
noremap <silent> <C-G>l :set number! <bar> :set relativenumber! <CR>
noremap <silent> <C-G>L :set relativenumber! <CR>

" toggle word wrap
nnoremap <silent> <C-G>w :set wrap! <CR>

" toggle highlight current line
nnoremap <silent> <C-G>h :set cursorline!<CR>

" toggle show listchars (like whitespace)
nnoremap <silent> <C-G>a :set list!<CR>


" spell checking
nnoremap <silent> <C-G>ss :set spell!<CR>
nnoremap <silent> <C-G>se :set spelllang=en<CR>
nnoremap <silent> <C-G>sd :set spelllang=de<CR>



"""""""""""
" MOVEMENT


" move intuitively when text is wrapped
nnoremap j gj
nnoremap k gk

" move faster
nnoremap gj 10j
nnoremap gk 10k
vnoremap gj 10j
vnoremap gk 10k


" move with emacs-keys like in most shells
" (noremap! with the '!' is for insert and ex mode)
" ... by characters
noremap! <C-b>  <Left>
noremap! <C-f>  <Right>
noremap! <C-d>  <Delete>
" ... by words
noremap! <M-b>  <S-Left>
noremap! <M-f>  <S-Right>
cnoremap <Esc>b <S-Left>
cnoremap <Esc>f <S-Right>


" move to BOL
" smart BOL: the cursor moves to the first nonblank character on the line,
"            or, if already at that position, to the start of the line.
"            (http://vim.wikia.com/wiki/Smart_home)
noremap <expr> <silent> <C-A> col('.') == match(getline('.'),'\S')+1 ? '0' : '^'
imap <silent> <C-A> <C-O><C-A>

" move to EOL
nnoremap <C-E> $
vnoremap <C-E> $
inoremap <C-E> <Esc>A
cnoremap <C-A> <Home>
" move to EOL with l instead of $
nnoremap cl c$
nnoremap yl y$
nnoremap dl d$
"nnoremap vl v$


" movement additions (operator pending mappings) --------------------{{{
" new movements ('din(' deletes inside next parenthees)
onoremap in( :<c-u>normal! f(vi(<cr>
onoremap il( :<c-u>normal! F)vi(<cr>
onoremap in{ :<c-u>normal! f{vi{<cr>
onoremap il{ :<c-u>normal! F}vi{<cr>
onoremap in) :<c-u>normal! f(vi(<cr>
onoremap il) :<c-u>normal! F)vi(<cr>
onoremap in} :<c-u>normal! f{vi{<cr>
onoremap il} :<c-u>normal! F}vi{<cr>
" using '[' interferes with native mappings
onoremap in] :<c-u>normal! f[vi[<cr>
onoremap il] :<c-u>normal! F]vi[<cr>
" }}}


" search
" (fallback, will be overwritten in plugins section)
nnoremap ö /
nnoremap Ö ?

" search in multiple files
" (fallback, will be overwritten in plugins section)
nnoremap / :vimgrep<Space>

" search for visual selection
vnoremap * y/<C-R>"<CR>
vnoremap / y/<C-R>"<CR>


" swap , and ; (makes more sense on german keyboard)
nnoremap , ;
nnoremap ; ,


" swap ` and ' (jump to markers)
" (by default, ' marked line, ` marked line and column)
nnoremap ' `
nnoremap ` '

" goto mark
nnoremap Ä `

" find matching element (brackets/braces/parentheses)
nnoremap <leader>äb %

" extended find matching element (e.g. HTML-tags with matchit plugin)
nmap <leader>ää %

" find all lines with keyword under cursor
" and ask which one to jump to
nmap <leader>ä/ [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>

" find git merge conflict markers
nnoremap <leader>äc /\v^[<\|=>]{7}( .*\|$)<CR>



"""""""""""""""
" TEXT EDITING


" alternate way to quit insert mode
inoremap jjj <Esc>jjj
inoremap kkk <Esc>kkk

" change to insert mode from visual mode
"vnoremap i vi

" yank line without line break (in difference to yy)
nnoremap Y ^y$

" autocompletion
" (fallback, will be overwritten in plugins section)
"inoremap <M-.>  <C-N>
"inoremap <Esc>. <C-N>
"inoremap <M-:>  <C-P>
"inoremap <Esc>: <C-P>

" indent lines
nnoremap < <<
nnoremap > >>
vnoremap < <gv
vnoremap > >gv

" move line up or down
nnoremap - ddp
nnoremap _ ddkP

" add new line above or below
noremap <M-o>  <Esc>o<Esc>k
noremap <Esc>o <Esc>o<Esc>k
noremap <M-O>  <Esc>O<Esc>j
noremap <Esc>O <Esc>O<Esc>j

" replace word under cursor with yank
nnoremap <leader>rw viwp
" replace line with yank
nnoremap <leader>rl Vp

" delete leading whitespace (can be prefixed with a count)
nnoremap <silent> <leader>dsl :s:^\s\+::<CR>

" change tab width
nnoremap <leader>tw2 :set expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>
nnoremap <leader>tw4 :set expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
nnoremap <leader>tw8 :set expandtab tabstop=8 shiftwidth=4 softtabstop=4<CR>
" convert tabs so spaces with :retab


" undo and redo
noremap <M-u>  :undo<CR>
noremap <Esc>u :undo<CR>
noremap <M-U>  :redo<CR>
noremap <Esc>U :redo<CR>



""""""""""""""""""""""
" BUFFERS AND WINDOWS


" change buffer
"nnoremap # :buffer " use ctrlp instead
nnoremap <Space><Space> :buffer #<CR>
nnoremap <M-n>  :bnext<CR>
nnoremap <Esc>n :bnext<CR>
nnoremap <M-p>  :bprevious<CR>
nnoremap <Esc>p :bprevious<CR>

" change window
nnoremap <silent> <C-j> :wincmd j<CR>
nnoremap <silent> <C-k> :wincmd k<CR>
nnoremap <silent> <C-h> :wincmd h<CR>
nnoremap <silent> <C-l> :wincmd l<CR>

" move buffer to a new window
nnoremap <silent> <leader><C-l> :vsplit<CR><C-W>w<CR>:bprevious<CR><C-W>w<CR>
nnoremap <silent> <leader><C-j>  :split<CR><C-W>w<CR>:bprevious<CR><C-W>w<CR>



"""""""""""""""""""""""""
" USEFUL EXTERNAL TOOLS


" shell in dir of current file
nnoremap <leader>if :call SetCwdToFilePath() <bar> :let $SHELL = '/usr/bin/fish' <bar>:!fish<CR>
nnoremap <leader>ib :call SetCwdToFilePath() <bar> :!bash<CR>

" file manager in dir of current file
nnoremap <leader>ir :call SetCwdToFilePath() <bar> :!ranger<CR>

" git interface
nnoremap <leader>it :call SetCwdToFilePath() <bar> :!tig<CR>







""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGINS (managed by Vundle)
"
"
" http://quyennguyen.com/code/Sync-Vim-With-Github-and-Vundle/
" http://lepture.com/en/2012/vundle-vs-pathogen
"
"
" install vundle like this:
"     git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
" and don't have ~/.vim/bundle under version control
" (instead, call :PluginInstall)

" Note for fish users like me:
" These commands throw some errors.
" To fix this, execute the following before starting vim:
"    set -x SHELL (which sh)

" some mappings for vundle itself
nnoremap <leader>pl :PluginList<CR>
nnoremap <leader>pi :PluginInstall<CR>
nnoremap <leader>pc :PluginClean<CR>
nnoremap <leader>pu :PluginUpdate<CR>
nnoremap <leader>ps :PluginSearch<Space>


" start vundle
filetype off " (required!)
set rtp+=~/.vim/bundle/vundle/
"call vundle#rc() " what is this instead of begin()?
call vundle#begin()

" let Vundle manage Vundle (required!)
Plugin 'gmarik/vundle'



"""""""""""""""""""""""""""""""""""""""""
"
" look and feel

Plugin 'flazz/vim-colorschemes'
Plugin 'christophermca/meta5'
Plugin 'joshdick/onedark.vim'


"""""""""""""""""""""""""""""""""""""""""

" copy to clipboard in visual mode
vnoremap <C-c> "+y

" TODO use something like this:
" https://github.com/svermeulen/vim-easyclip


"""""""""""""""""""""""""""""""""""""""""
"
" allow plugins to utilize . command

Plugin 'tpope/vim-repeat'


"""""""""""""""""""""""""""""""""""""""""
"
" amazingly move everywhere

Plugin 'easymotion/vim-easymotion'

" prefix
map ä <Plug>(easymotion-prefix)


"""""""""""""""""""""""""""""""""""""""""
"
" advanced searching

Plugin 'haya14busa/incsearch.vim'

"nnoremap ö  <Plug>(incsearch-forward)
"nnoremap Ö  <Plug>(incsearch-backward)
"nnoremap gö <Plug>(incsearch-stay)

nnoremap ö :call incsearch#call()<CR>
nnoremap Ö :call incsearch#call({'command': '?'})<CR>


" searching in multiple files
" install 'the_silver_searcher' package on the system
Plugin 'rking/ag.vim'

" always start in project root instead of cwd
let g:ag_working_path_mode="r"

nnoremap / :Ag<Space>
" search for word under cursor
nnoremap <leader>* :Ag "\b<C-R><C-W>\b"<CR>:cw<CR>
" search for visual selection
xnoremap  / y:<c-u>Ag <C-R>=shellescape(expand(@"),1)<CR><CR>
"nnoremap  K :<c-u>Ag <c-r>=shellescape(expand("<cword>"),1)<cr>:copen<cr>


"""""""""""""""""""""""""""""""""""""""""
"
" file searching and much more
" http://bling.github.io/blog/2013/06/02/unite-dot-vim-the-plugin-you-didnt-know-you-need/
" TODO CONFIGURE AND TEST

"Plugin 'Shougo/vimproc.vim'
"Plugin 'Shougo/unite.vim'


"""""""""""""""""""""""""""""""""""""""""
"
" sick statusline

" https://powerline.readthedocs.org/en/latest/usage/other.html#vim-statusline
"
" instead of this deprecated vimscript plugin...:
" Plugin 'Lokaltog/vim-powerline
" ... we use this rewritten one in python:
" Plugin 'powerline/powerline'

" disable powerline if it is installed
let g:powerline_loaded = 1

" on arch linux, installed python-powerline
" and fix import error with
"let $PYTHONPATH="/usr/lib/python3.5/site-packages"


" lightweight alternative to powerline

Plugin 'bling/vim-airline'

let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts=0


" TODO simple statusline like this
" http://www.blaenkdenum.com/posts/a-simpler-vim-statusline/


"""""""""""""""""""""""""""""""""""""""""
"
" file browser

Plugin 'scrooloose/nerdtree'

let NERDTreeWinSize=50
let NERDTreeQuitOnOpen=1

" show/hide nerdtree
noremap <silent> <M-i>  :NERDTreeToggle<CR>
noremap <silent> <Esc>i :NERDTreeToggle<CR>
" show nerdtree from current file
noremap <silent> <Esc>I :call SetCwdToFilePath() <bar> :NERDTreeCWD<CR>
noremap <silent> <M-I>  :call SetCwdToFilePath() <bar> :NERDTreeCWD<CR>

" show/hide hidden files
let NERDTreeMapToggleHidden='.'


"""""""""""""""""""""""""""""""""""""""""
"
" fuzzy find files etc
" (like Sublimes 'Goto Anything')

Plugin 'kien/ctrlp.vim'

let g:ctrlp_map = '#'
nnoremap # :CtrlPMixed<CR>

" also find hidden files
let g:ctrlp_show_hidden = 1


"""""""""""""""""""""""""""""""""""""""""
"
" static code analysis

Plugin 'scrooloose/syntastic'

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

nnoremap <silent> <leader>sc :SyntasticCheck<CR>
nnoremap <silent> <leader>sr :SyntasticReset<CR>
nnoremap <silent> <leader>si :SyntasticInfo<CR>

" install linters on the system:
" - pylint
" - jslint
" - csslint (but phpcs also can do css)
" - phpcs (https://github.com/squizlabs/PHP_CodeSniffer)
let g:syntastic_php_checkers = ['phpcs', 'phplint', 'php']

" ignore these errors/warnings
let g:syntastic_quiet_messages = { "regex": [
   \ '\mMissing file doc comment',
   \ '\mLine indented incorrectly;.*'
   \ ] }


"""""""""""""""""""""""""""""""""""""""""

" text editing made a little nicer

" make the 0 register a stack (yank/delete multiple things without worrying)
" lightweight alternative to yankring
Plugin 'maxbrunsfeld/vim-yankstack'
let g:yankstack_map_keys = 0
nmap <C-p> <Plug>yankstack_substitute_older_paste
nmap <C-n> <Plug>yankstack_substitute_newer_paste

" add and toggle comments with <leader>c<space>
Plugin 'scrooloose/nerdcommenter'

" automagically add closing braces etc
Plugin 'Raimondi/delimitMate'

" add a ; at the end of a line
"Plugin 'lfilho/cosco.vim'
"inoremap <silent> <Esc><Return> <Esc>:call cosco#commaOrSemiColon()<CR>A<Return>
inoremap <silent> <Esc><Return> <Esc>A;<Return>

" add/change/delete quotes/braces/... and more
Plugin  'tpope/vim-surround'

" % also matches HTML-tags/words etc
Plugin 'edsono/vim-matchit'


"""""""""""""""""""""""""""""""""""""""""
"
" Snippets

" snippet engine
Plugin 'SirVer/ultisnips'
let g:UltiSnipsExpandTrigger="<Esc>."
"let g:UltiSnipsListSnippets="<Esc>."
let g:UltiSnipsJumpForwardTrigger="<C-i>"
let g:UltiSnipsJumpBackwardTrigger="<C-o>"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "sflipsnippets"]


" snippet packs
Plugin 'honza/vim-snippets'


"""""""""""""""""""""""""""""""""""""""""
"
" YouCompleteMe
" advanced auto completion engine
"
" Remember: YCM is a plugin with a compiled component. If you update YCM using
" Vundle and the ycm_support_libs library APIs have changed (happens rarely),
" YCM will notify you to recompile it. You should then rerun the install
" process.

Plugin 'Valloric/YouCompleteMe'

let g:ycm_key_list_select_completion = ['<C-N>', '<Down>', '<Tab>']
let g:ycm_key_list_previous_completion=['<C-P>', '<Up>']


"""""""""""""""""""""""""""""""""""""""""

Plugin 'Chiel92/vim-autoformat'

" install formatters on the system:
" - js-beautify (for HTML, CSS, JavaScript, JSON)

nnoremap <leader>sa :Autoformat<CR>


"""""""""""""""""""""""""""""""""""""""""
"
" show git status of lines on the left
"
Plugin 'airblade/vim-gitgutter'

nnoremap <C-G>g :GitGutterToggle<CR>


"""""""""""""""""""""""""""""""""""""""""
"
" handle trailing whitespace

Plugin 'vim-scripts/ShowTrailingWhiteSpace'

Plugin 'vim-scripts/DeleteTrailingWhiteSpace'
" check for trailing whitespace when writing file
let g:DeleteTrailingWhitespace = 1
" delete trailing whitespace on demand for current line
nnoremap <silent> <leader>dst :.DeleteTrailingWhitespace<CR>
vnoremap <silent> <leader>dst :DeleteTrailingWhitespace<CR>
" delete trailing whitespace on demand for whole file
nnoremap <silent> <leader>dsT :%DeleteTrailingWhitespace<CR>


"""""""""""""""""""""""""""""""""""""""""
"
" LaTeX stuff

Plugin 'lervag/vimtex'

let g:vimtex_view_method='zathura'
"let g:vimtex_viewer_general='zathura'

" YouCompleteMe integration
if !exists('g:ycm_semantic_triggers')
    let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers.tex = [
    \ 're!\\[A-Za-z]*(ref|cite)[A-Za-z]*([^]]*])?{([^}]*,?)*',
    \ 're!\\includegraphics([^]]*])?{[^}]*',
    \ 're!\\(include|input){[^}]*'
    \ ]

nnoremap <leader>bl :VimtexCompileToggle<CR>


"""""""""""""""""""""""""""""""""""""""""

" finish vundle
call vundle#end() " (required!)
filetype plugin indent on " (required!)



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" apparently colorscheme must be set after vundle is done

colorscheme desert " fallback
"colorscheme candycode
"colorscheme dante
"colorscheme jellybeans
"colorscheme molokai
"colorscheme meta5
"colorscheme desertEx
"colorscheme lucius
colorscheme onedark


