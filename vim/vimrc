" Author: Philipp Moers <soziflip@gmail.com>
"
" ~/.vimrc




""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SETTINGS (not plugin specific)


" we use vim, not vi
set nocompatible

" encoding should be utf-8 on every OS
set     encoding=utf-8
set fileencoding=utf-8

" syntax highlighting
syntax on

" theme (fallback, will be overwritten below)
colorscheme desert

" line numbers
set nonumber
set norelativenumber
set numberwidth=6

" highlight current line
set cursorline

" statusline
"set statusline="%f%m%r%h%w [%Y] [0x%02.2B]%< %F%=%4v,%4l %3p%% of %L"
set ruler

" completions behaviour
set wildmode=list:longest,full

" show command completions above commandline etc
set wildmenu

" scrolling
" start scrolling when we're 8 lines away from margins
set scrolloff=8
set sidescrolloff=15
set sidescroll=1

" search preferences
set incsearch
set ignorecase
set smartcase
" never have to append 'g' to a search/substitute again
set gdefault

" use 4 spaces instead of tabs
set expandtab
set tabstop=4
set shiftwidth=4

" indent after open braces etc
set autoindent
set smartindent

" allow to :edit multiple files in buffers without writing changes
set hidden

" puts new split windows to the bottom of the current
set splitbelow
" puts new vsplit windows to the right of the current
set splitright






""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" KEYBINDINGS (not plugin specific)


" mappings with the alt key should be done twice:
"      - with <Esc>* for terminal sequences, and
"      - with <M-*>  for gvim


" leader key is space
let mapleader=' '



""""""""""
" GENERAL


" (for compatibility)
nnoremap <C-G><C-G> <C-G>

" open config file
"nnoremap <leader>ev :edit ~/.vimrc<CR>
" (use absolute path to dotfiles, not symlink for ctrlp)
nnoremap <leader>ev :edit ~/dotfiles/vim/vimrc<CR>

" reload config file
nnoremap <leader>sv :source ~/.vimrc<CR>
nnoremap <F5>       :source ~/.vimrc<CR>

" open help in vertical window
nnoremap <leader><C-h> :vertical help 

" to follow links in help
nnoremap <Return> <C-]>


" close file (not window)
nnoremap q     :bdelete<CR>

" quit window quickly
" (no hidden mode: will prompt if the buffer was changed)
" (   hidden mode: will not close the buffer)
nnoremap Q     :quit<CR>

" quit vim (mulitple windows)
nnoremap <C-D> :quitall<CR>


" save changes without quit
nnoremap <M-s>  :write<CR>
nnoremap <Esc>s :write<CR>


" record macro ('complex repeat')
nnoremap <leader>M q
" replay macro ('complex repeat')
nnoremap <leader>m @


" scroll (alt key)
noremap <M-j>  <C-D>
noremap <Esc>j <C-D>
noremap <M-k>  <C-U>
noremap <Esc>k <C-U>

" toggle line numbers
noremap <silent> <C-G>l :set number! <bar> :set relativenumber! <CR>
noremap <silent> <C-G>L :set relativenumber! <CR>

" toggle word wrap
nnoremap <silent> <C-G>w :set wrap! <CR>

" toggle highlight current line
nnoremap <silent> <C-G>h :set cursorline!<CR>





"""""""""""
" MOVEMENT


" move intuitively when text is wrapped
nnoremap j gj
nnoremap k gk

" move faster
nnoremap gj 10j
nnoremap gk 10k
vnoremap gj 10j
vnoremap gk 10k

" move to BOL
" smart BOL: the cursor moves to the first nonblank character on the line,
"            or, if already at that position, to the start of the line.
"            (http://vim.wikia.com/wiki/Smart_home)
noremap <expr> <silent> <C-A> col('.') == match(getline('.'),'\S')+1 ? '0' : '^'
imap <silent> <C-A> <C-O><C-A>

" move to EOL
nnoremap <C-E> $
vnoremap <C-E> $
inoremap <C-E> <Esc>A
cnoremap <C-A> <Home>
" move to EOL with l instead of $
nnoremap cl c$
nnoremap yl y$
nnoremap dl d$
"nnoremap vl v$

" search
nnoremap ö /
nnoremap Ö ?

" swap , and ; (makes more sense on german keyboard)
nnoremap , ;
nnoremap ; ,

" swap ` and ' (jump to markers)
" (by default, ' marked line, ` marked line and column)
nnoremap ' `
nnoremap ` '

" goto mark
nnoremap Ä `

" find matching brackets/braces/parentheses
nnoremap <leader>fb %

" find all lines with keyword under cursor
" and ask which one to jump to
nmap <leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>

" find git merge conflict markers
nnoremap <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>



"""""""""""""""
" TEXT EDITING


" change to insert mode from visual mode
vnoremap i vi

" autocompletion
inoremap <M-.>  <C-N>
inoremap <Esc>. <C-N>
inoremap <M-:>  <C-P>
"inoremap <Esc>: <C-P>

" indent lines
nnoremap < <<
nnoremap > >>
vnoremap < <gv
vnoremap > >gv

" add new line above or below
noremap <M-o>  <Esc>o<Esc>k
noremap <Esc>o <Esc>o<Esc>k
noremap <M-O>  <Esc>O<Esc>j
noremap <Esc>O <Esc>O<Esc>j

" delete leading whitespace (can be prefixed with a count)
nnoremap <silent> <leader>dsl :s:^\s\+::<CR>

" undo and redo
noremap <M-u>  :undo<CR>
noremap <Esc>u :undo<CR>
noremap <M-U>  :redo<CR>
noremap <Esc>U :redo<CR>



""""""""""""""""""""""
" BUFFERS AND WINDOWS


" change buffer
"nnoremap # :buffer " use ctrlp instead
nnoremap <Space><Space> :buffer #<CR>
nnoremap <M-n>  :bnext<CR>

nnoremap <Esc>n :bnext<CR>
nnoremap <M-p>  :bprevious<CR>
nnoremap <Esc>p :bprevious<CR>

" change window
nnoremap <silent> <leader>j :wincmd j<CR>
nnoremap <silent> <leader>k :wincmd k<CR>
nnoremap <silent> <leader>h :wincmd h<CR>
nnoremap <silent> <leader>l :wincmd l<CR>

" reorder windows
nnoremap <silent> <leader>J :wincmd J<CR>
nnoremap <silent> <leader>K :wincmd K<CR>
nnoremap <silent> <leader>H :wincmd H<CR>
nnoremap <silent> <leader>L :wincmd L<CR>

" move buffer to a new window
nnoremap <silent> <leader><C-l> :vsplit<CR><C-W>w<CR>:bprevious<CR><C-W>w<CR>
nnoremap <silent> <leader><C-j>  :split<CR><C-W>w<CR>:bprevious<CR><C-W>w<CR>



"""""""""""""""""""""""""
" USEFUL EXTERNAL TOOLS


" shell in dir of current file
nnoremap <leader>if :lcd %:p:h <bar> :!fish<CR>
nnoremap <leader>ib :lcd %:p:h <bar> :!bash<CR>

" file manager in dir of current file
nnoremap <leader>ir :lcd %:p:h <bar> :!ranger<CR>

" git interface
nnoremap <leader>it :lcd %:p:h <bar> :!tig<CR>







""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGINS (managed by Vundle)
"
"
" http://quyennguyen.com/code/Sync-Vim-With-Github-and-Vundle/
" http://lepture.com/en/2012/vundle-vs-pathogen
"
"
" install vundle like this:
"     git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
" and don't have ~/.vim/bundle under version control
" (instead, call :PluginInstall)


" some mappings for vundle itself
nnoremap <leader>pl :PluginList<CR>
nnoremap <leader>pi :PluginInstall<CR>
nnoremap <leader>pc :PluginClean<CR>
nnoremap <leader>pu :PluginUpdate<CR>
nnoremap <leader>ps :PluginSearch 

" (this is required by Vundle and will be turned on at the end of this script)
filetype off

" start vundle
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle (required!)
Plugin 'gmarik/vundle'



"""""""""""""""""""""""""""""""""""""""""

Plugin 'flazz/vim-colorschemes'

colorscheme jellybeans


"""""""""""""""""""""""""""""""""""""""""

Plugin 'easymotion/vim-easymotion'

" prefix
map ä <Plug>(easymotion-prefix)


"""""""""""""""""""""""""""""""""""""""""

" https://powerline.readthedocs.org/en/latest/usage/other.html#vim-statusline
"
" instead of this deprecated vimscript plugin...:
" Plugin 'Lokaltog/vim-powerline
" ... we use this rewritten one in python:
"Plugin 'powerline/powerline'

"disable powerline
let g:powerline_loaded = 1

" on arch linux, installed python-powerline
" and fix import error with
"let $PYTHONPATH="/usr/lib/python3.5/site-packages"



" lightweight alternative to powerline

Plugin 'bling/vim-airline'

let g:airline#extensions#tabline#enabled = 1


"""""""""""""""""""""""""""""""""""""""""

Plugin 'scrooloose/nerdcommenter'


"""""""""""""""""""""""""""""""""""""""""

Plugin 'scrooloose/nerdtree'

let NERDTreeWinSize=50

noremap <silent><M-i>  :NERDTreeToggle<CR>
noremap <silent><Esc>i :NERDTreeToggle<CR>

let NERDTreeMapToggleHidden='.'


"""""""""""""""""""""""""""""""""""""""""

Plugin 'kien/ctrlp.vim'

let g:ctrlp_map = '#'
nnoremap # :CtrlPMixed<CR>

" also find hidden files
let g:ctrlp_show_hidden = 1


"""""""""""""""""""""""""""""""""""""""""

Plugin 'scrooloose/syntastic'

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

nnoremap <leader>sc :SyntasticCheck<CR>
nnoremap <leader>sr :SyntasticReset<CR>


"""""""""""""""""""""""""""""""""""""""""

Plugin 'airblade/vim-gitgutter'

nnoremap <C-G>g :GitGutterToggle<CR>


"""""""""""""""""""""""""""""""""""""""""
"
" Snippets

" snippet engine
Plugin 'SirVer/ultisnips'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-i>"
let g:UltiSnipsJumpBackwardTrigger="<c-o>"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "sflipsnippets"]

" snippet packs
Plugin 'honza/vim-snippets'


"""""""""""""""""""""""""""""""""""""""""
"
" Whitespace

Plugin 'vim-scripts/ShowTrailingWhiteSpace'

Plugin 'vim-scripts/DeleteTrailingWhiteSpace'
" don't check for trailing whitespace when writing file
" (i want them sometimes, e.g. in my vimrc)
let g:DeleteTrailingWhitespace = 0
" delete trailing whitespace on demand for current line
nnoremap <silent> <leader>dst :.DeleteTrailingWhitespace<CR>
vnoremap <silent> <leader>dst :DeleteTrailingWhitespace<CR>
" delete trailing whitespace on demand for whole file
nnoremap <silent> <leader>dsT :%DeleteTrailingWhitespace<CR>


"""""""""""""""""""""""""""""""""""""""""


" (after loading the plugins, this can be turned on again)
filetype plugin indent on



