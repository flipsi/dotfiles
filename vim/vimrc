"  Author:  Philipp Moers
"           soziflip@gmail.com
"           github.com/sflip/dotfiles
"
"  ~/.vimrc
"
"
"  Configuration file for
"
"  __      _______ __  __
"  \ \    / /_   _|  \/  |
"   \ \  / /  | | | \  / |
"    \ \/ /   | | | |\/| |
"     \  /   _| |_| |  | |
"      \/   |_____|_|  |_|
"
"
"
"  (What vim is? The best reason not to use emacs!)
"
"
"
"
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                              "
"  SETTINGS SECTION                                                            "
"  (not plugin specific)                                                       "
"                                                                              "
"                                                                              "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


" we use vim, not vi
set nocompatible

" execute external commands with bash (fish makes problems with vundle)
set shell=/usr/bin/bash

" edit runtimepath
set runtimepath+=~/.vim/syntax

" set timeout for escape sequences
" (so that leaving insert mode does not last that long)
set timeout ttimeoutlen=50
" but mapping delay can be more
set timeoutlen=1200

" don't draw everything (e.g. when playing macros)
set lazyredraw

" encoding should be utf-8 on every OS
set     encoding=utf-8
set fileencoding=utf-8

" reload files changed outside vim
" (still have to change buffer or so)
set autoread

" command history size
set history=9999

" undo persistent over file close
" (the undodir needs to exist!)
set undofile
set undodir=~/.vim/undodir
set undolevels=1000
set undoreload=10000

" syntax highlighting
syntax enable

" line numbers
set number
set relativenumber
set numberwidth=6

" highlight current line
set cursorline

" statusline
set statusline="%f%m%r%h%w [%Y] [0x%02.2B]%< %F%=%4v,%4l %3p%% of %L"
set showcmd
set ruler
set laststatus=2

" completions behaviour
set wildmode=longest,full
set wildmenu

" ignore some files
set wildignore+=*.o,*.obj
set wildignore+=*.pyc
set wildignore+=*.swp

" scrolling
" start scrolling when we're 8 lines away from margins
set scrolloff=8
set sidescrolloff=15
set sidescroll=1

" search preferences
set incsearch
set ignorecase
set smartcase
" never have to append 'g' to a search/substitute again
set gdefault

" allow the cursor to move where there is no character
set virtualedit=all

" characters to show in list mode (like whitespace)
" and wrap symbols that are always shown
set listchars=space:Â·,tab:--,extends:>,precedes:<

" use 4 spaces instead of tabs
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4

" indent after open braces etc
set autoindent
set smartindent
set smarttab

" allow to :edit multiple files in buffers without writing changes
set hidden

" puts new split windows to the bottom of the current
set splitbelow
" puts new vsplit windows to the right of the current
set splitright


" allows cursor change in tmux mode
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif





""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                              "
"  FUNCTION  SECTION                                                           "
"  (not plugin specific)                                                       "
"                                                                              "
"                                                                              "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


" set cwd to filepath ----{{{
function! SetCwdToFilePath()
    execute "cd " . expand('%:p:h')
endfunction
" }}}


" toggle syntax highlighting ----{{{
function! ToggleSyntax()
   if exists("g:syntax_on")
      syntax off
   else
      syntax enable
   endif
endfunction
" }}}


" make columns after &textwidth visible or invisible ----{{{
function! ToggleColorColumn()
    let col = &textwidth
    let expr = join(range(col + 1, 255), ',')
    if &colorcolumn == "" || &colorcolumn != expr
       execute "set colorcolumn=" . expr
    else
       execute "set colorcolumn="
    endif
endfunction
" }}}

"... and call this function when &textwidth is changed
autocmd OptionSet textwidth :call ToggleColorColumn()


" insert a line some characters above ----{{{
function! InsertCharLine(char, num)
    let char = a:char
    let num = a:num - 1
    execute "normal O\<Esc>i" . char . "\<Esc>vy" . num . "pj"
endfunction
" }}}


" insert a box of characters around the word in the current line ----{{{
function! InsertCharBox(char)
    let char = a:char
    execute "normal I" . char . " \<Esc>A " . char ."\<Esc>"
    execute "normal VYPVr" . char . char . "\<Esc>"
    execute "normal Yjp\<Esc>"
endfunction
" }}}



" ranger as a file chooser ----{{{
function! RangerChooser()
    let temp = tempname()
    " The option "--choosefiles" was added in ranger 1.5.1. Use the next line
    " with ranger 1.4.2 through 1.5.0 instead.
    "exec 'silent !ranger --choosefile=' . shellescape(temp)
    if has("gui_running")
        exec 'silent !xterm -e ranger --choosefiles=' . shellescape(temp)
    else
        exec 'silent !ranger --choosefiles=' . shellescape(temp)
    endif
    if !filereadable(temp)
        redraw!
        " Nothing to read.
        return
    endif
    let names = readfile(temp)
    if empty(names)
        redraw!
        " Nothing to open.
        return
    endif
    " Edit the first item.
    exec 'edit ' . fnameescape(names[0])
    " Add any remaning items to the arg list/buffer list.
    for name in names[1:]
        exec 'argadd ' . fnameescape(name)
    endfor
    redraw!
endfunction
command! -bar RangerChooser call RangerChooser()
" }}}













""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                              "
"  KEYBINDINGS SECTION                                                         "
"  (not plugin specific)                                                       "
"                                                                              "
"  mappings with the alt key should be done twice:                             "
"      - with <Esc>* for terminal sequences, and                               "
"      - with <M-*>  for gvim                                                  "
"                                                                              "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""




" (non text edit) leader key is space
let mapleader=' '
let maplocalleader=' '

" text edit leader is minus




"""""""""""
" GENERAL "


" (for compatibility)
nnoremap <C-G><C-G> <C-G>


" open config file
"nnoremap <Leader>ev :edit ~/dotfiles/vim/vimrc<CR>
nnoremap <Leader>ev :execute 'edit ' . resolve(expand($MYVIMRC))<CR>
nnoremap <Leader>e3 :edit ~/.i3/config<CR>

" reload config file
nnoremap <Leader>sv :source $MYVIMRC<CR>
nnoremap <F5>       :source $MYVIMRC<CR>


" open help in vertical window
cnoreabbrev <expr> h ((getcmdtype() is# ':' && getcmdline() is# 'h')
                 \ ?('vertical help'):('h'))

" to follow links in help
nnoremap <M-Enter>    <C-]>
nnoremap <Esc><Enter> <C-]>


" copy to clipboard in visual mode
"vnoremap <C-c> "+y
vnoremap <C-c> "*y
" paste from clipboard
noremap  <C-v><C-v> "*p
inoremap <C-v><C-v> <Esc>"*p


" record macro ('complex repeat')
nnoremap <Leader>M q
" replay macro ('complex repeat')
nnoremap <Leader>m @


" abort command in ex mode
cnoremap <C-g>  <C-c>


" scroll with arrow keys if i lay back
nnoremap <Down> <C-E>
nnoremap <Up>   <C-Y>

" scroll a little smoother (but still without plugin)
" (this actually is suggested in :help scroll-smooth)
noremap <M-j>  <C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E>
noremap <Esc>j <C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E>
noremap <M-k>  <C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y>
noremap <Esc>k <C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y>




"""""""""""""""""""
" CHANGE SETTINGS "


" change tab width
nnoremap <Leader>settw2 :set expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>
nnoremap <Leader>settw4 :set expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
nnoremap <Leader>settw8 :set expandtab tabstop=8 shiftwidth=4 softtabstop=4<CR>
" convert tabs so spaces with :retab

" go into paste mode
nnoremap <Leader>setp :set paste! <bar> :set paste?<CR>



""""""""""""""""""""""""
" CHANGE VISUAL THINGS "


" toggle syntax highlighting
nmap <silent> <C-G>y :call ToggleSyntax()<CR>

" toggle line numbers
noremap <silent> <C-G>l :set number! <bar> :set relativenumber! <CR>
noremap <silent> <C-G>L :set relativenumber! <CR>

" toggle word wrap
nnoremap <silent> <C-G>w :set wrap! <CR>

" toggle vertical ruler
nnoremap <silent> <C-G>r :call ToggleColorColumn()<CR>
nnoremap <silent> <C-G>R :highlight ColorColumn ctermbg=234<CR>

" toggle highlight current line
nnoremap <silent> <C-G>h :set cursorline!<CR>

" toggle show listchars (like whitespace)
nnoremap <silent> <C-G>a :set list!<CR>


" spell checking
nnoremap <C-G>ss :set spell! <bar> :set spell? <CR>
nnoremap <C-G>se :set spelllang=en<CR>
nnoremap <C-G>sd :set spelllang=de<CR>
nmap <C-G>sg <C-G>sd





""""""""""""
" MOVEMENT "


" move intuitively when text is wrapped
nnoremap j gj
nnoremap k gk

" move faster
nnoremap gj 10j
nnoremap gk 10k
vnoremap gj 10j
vnoremap gk 10k


" move with emacs-keys like in most shells
" (noremap! with the '!' is for insert and ex mode)
" ... by characters
noremap! <C-b>  <Left>
noremap! <C-f>  <Right>
noremap! <C-d>  <Delete>
" ... by words
noremap! <M-b>  <S-Left>
noremap! <M-f>  <S-Right>
cnoremap <Esc>b <S-Left>
cnoremap <Esc>f <S-Right>


" move to BOL
" smart BOL: the cursor moves to the first nonblank character on the line,
"            or, if already at that position, to the start of the line.
"            (http://vim.wikia.com/wiki/Smart_home)
noremap <expr> <silent> <C-A> col('.') == match(getline('.'),'\S')+1 ? '0' : '^'
imap <silent> <C-A> <C-O><C-A>

" move to EOL
nnoremap <C-E> $
vnoremap <C-E> $
inoremap <C-E> <Esc>A
cnoremap <C-A> <Home>
" move to EOL with l instead of $
nnoremap cl c$
nnoremap yl y$
nnoremap dl d$
"nnoremap vl v$


" movement additions (operator pending mappings) --------------------{{{
" new movements ('din(' deletes inside next parenthees)
onoremap in( :<c-u>normal! f(vi(<cr>
onoremap il( :<c-u>normal! F)vi(<cr>
onoremap in{ :<c-u>normal! f{vi{<cr>
onoremap il{ :<c-u>normal! F}vi{<cr>
onoremap in) :<c-u>normal! f(vi(<cr>
onoremap il) :<c-u>normal! F)vi(<cr>
onoremap in} :<c-u>normal! f{vi{<cr>
onoremap il} :<c-u>normal! F}vi{<cr>
" using '[' interferes with native mappings
onoremap in] :<c-u>normal! f[vi[<cr>
onoremap il] :<c-u>normal! F]vi[<cr>
" }}}



" swap , and ;
" (makes more sense on german keyboard)
nnoremap , ;
nnoremap ; ,
nnoremap g, g;
nnoremap g; g,


" swap ` and ' (jump to markers)
" (by default, ' marked line, ` marked line and column)
nnoremap ' `
nnoremap ` '

" goto mark
nnoremap Ã `

" goto last edit
nnoremap <Leader>. '.



"""""""""""""""""""""""""
" SEARCHING AND FINDING "


" search
" (fallback, will be overwritten in plugins section)
nnoremap Ã¶ /
nnoremap Ã ?

" search in multiple files
" (fallback, will be overwritten in plugins section)
nnoremap / :vimgrep<Space>

" search for visual selection
vnoremap * y/<C-R>"<CR>
vnoremap / y/<C-R>"<CR>


" find trailing whitespace
nnoremap <Leader>Ã¤st /\v\s+$<CR>

" find matching element (brackets/braces/parentheses)
nnoremap <Leader>Ã¤b %
" extended find matching element (e.g. HTML-tags with matchit plugin)
nmap <Leader>Ã¤Ã¤ %

" find all lines with keyword under cursor
" and ask which one to jump to
nmap <Leader>Ã¤/ [I:let nr = input("Which one: ")
            \   <Bar> exe "normal " . nr ."[\t"<CR>

" find git merge conflict markers
nnoremap <Leader>Ã¤c /\v^[<\|=>]{7}( .*\|$)<CR>


" for now, these jumping 'find' keymaps should also be usable with Ã¶
nmap <Leader>Ã¶ <Leader>Ã¤




""""""""""""""""
" TEXT EDITING "


" text edit leader is minus


" alternate way to quit insert mode
"inoremap jjj <Esc>jjj
"inoremap kkk <Esc>kkk

" change to insert mode from visual mode
"vnoremap i vi

" yank line without line break (in difference to yy)
"nnoremap Y ^y$

" autocompletion
" (fallback, will be overwritten in plugins section)
"inoremap <M-.>  <C-N>
"inoremap <Esc>. <C-N>
"inoremap <M-:>  <C-P>
"inoremap <Esc>: <C-P>

" increment/decrement number
nnoremap +  <C-A>
nnoremap -- <C-X>


" indent lines
nnoremap < <<
nnoremap > >>
vnoremap < <gv
vnoremap > >gv

" move line up or down
nnoremap <silent> -k :m .-2<CR>==
nnoremap <silent> -j :m .+1<CR>==
vnoremap <silent> -j :m '>+1<CR>gv=gv
vnoremap <silent> -k :m '<-2<CR>gv=gv

" add new line above or below (this works without mappings)
"noremap <M-o>  <Esc>o<Esc>k
"noremap <Esc>o <Esc>o<Esc>k
"noremap <M-O>  <Esc>O<Esc>j
"noremap <Esc>O <Esc>O<Esc>j


" add a line of characters
nnoremap -al :call InsertCharLine(input("Insert character: "), 80)<CR>
" add a box of characters ('comment box')
nnoremap -ab :call InsertCharBox(input("Insert character: "))<CR>


" replace word under cursor with yank
nnoremap -rw viwp
nnoremap -rW viWp
" replace line with yank
nnoremap -rl Vp

" correct typos like 'DAmnitypefast' to titlecase ('Damnitypefast')
nnoremap -tt blgueea


" delete leading whitespace (can be prefixed with a count)
nnoremap <silent> -dsl :s:^\s\+::<CR>
" replace '  ' (double space) with ' ' (one space)
nnoremap <silent> -dsd :.s:\v(\S)  (\S):\1 \2:<CR>
nnoremap <silent> -dsD :%s:\v(\S)  (\S):\1 \2:<CR>


" duplicate a line and comment out the first one
" (fallback, will be overwritten in plugins section)
nmap <Leader>cd YI#<Esc>p


" undo and redo
" (in difference to :undo and :redo, :earlier and :later also make changes
" reachable if we branch, i.e. go back in history and make other changes)
noremap <M-u>  :earlier<CR>
noremap <Esc>u :earlier<CR>
noremap <M-U>  :later<CR>
noremap <Esc>U :later<CR>





"""""""""""""""""""""""
" BUFFERS AND WINDOWS "


" change buffer by searching
" (fallback, will be overwritten in plugins section)
nnoremap # :buffer<Space>

" change to LRU buffer
nnoremap <Space><Space> :buffer #<CR>

" circle through buffers
nnoremap <M-n>  :bnext<CR>
nnoremap <Esc>n :bnext<CR>
nnoremap <M-p>  :bprevious<CR>
nnoremap <Esc>p :bprevious<CR>

" change window
nnoremap <silent> <C-j> :wincmd j<CR>
nnoremap <silent> <C-k> :wincmd k<CR>
nnoremap <silent> <C-h> :wincmd h<CR>
nnoremap <silent> <C-l> :wincmd l<CR>

" move buffer to a new window
nnoremap <silent> <Leader><C-l> :vsplit<CR><C-W>w<CR>:bprevious<CR><C-W>w<CR>
nnoremap <silent> <Leader><C-j>  :split<CR><C-W>w<CR>:bprevious<CR><C-W>w<CR>




""""""""""""""""""
" EXTERNAL TOOLS "


" shell in dir of current file
nnoremap <Leader>if :call SetCwdToFilePath() <bar>
             \ :let $SHELL = '/usr/bin/fish' <bar> :!fish<CR>
nnoremap <Leader>ib :call SetCwdToFilePath() <bar> :!bash<CR>

" file manager in dir of current file
"nnoremap <Leader>ir :call SetCwdToFilePath() <bar> :!ranger<CR>
nnoremap <Leader>ir :call SetCwdToFilePath() <bar> :RangerChooser<CR>

" git interface
nnoremap <Leader>it :call SetCwdToFilePath() <bar> :!tig<CR>





""""""""""""""""""""""""
" SAVING AND CLOSING   "


" remember ZZ and ZQ

" save changes without quit
nnoremap <M-s>  :write<CR>
nnoremap <Esc>s :write<CR>


" close file (not window)
nnoremap q :bdelete<CR>
nnoremap <Leader>qq :bdelete!<CR>

" quit window
nnoremap Q :quit<CR>
" quit all other windows
nnoremap <Leader>Q :only<CR>

" quit vim (mulitple windows)
" (this is how i exit most terminal applications)
nnoremap <C-D> :quitall<CR>







""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                              "
"  PLUGIN SECTION                                                              "
"                                                                              "
"  (Plugins managed by Vundle)                                                 "
"                                                                              "
"                                                                              "
"  http://quyennguyen.com/code/Sync-Vim-With-Github-and-Vundle/                "
"  http://lepture.com/en/2012/vundle-vs-pathogen                               "
"                                                                              "
"                                                                              "
"  Install vundle like this:                                                   "
"      git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle     "
"  and don't have ~/.vim/bundle under version control                          "
"  (instead, call :PluginInstall on each host)                                 "
"                                                                              "
"                                                                              "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


" The plugin section is only executed when Vundle is installed,
" so I can use my vimrc as a stripped-down version on hosts/users without Vundle
" without errors.
if isdirectory(expand("~/.vim/bundle/vundle"))


    " start vundle
    filetype off
    set rtp+=~/.vim/bundle/vundle/
    "call vundle#rc()
    call vundle#begin()



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" let Vundle manage Vundle (required!)
Plugin 'gmarik/vundle'

" some mappings for vundle itself
nnoremap <Leader>pl :PluginList<CR>
nnoremap <Leader>pi :PluginInstall<CR>
nnoremap <Leader>pc :PluginClean<CR>
nnoremap <Leader>pu :PluginUpdate<CR>
nnoremap <Leader>ps :PluginSearch<Space>



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" allow plugins to utilize . command

Plugin 'tpope/vim-repeat'



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" look and feel

" colorschemes
Plugin 'flazz/vim-colorschemes'
Plugin 'christophermca/meta5'
Plugin 'joshdick/onedark.vim'
Plugin 'sjl/badwolf'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" sick statusline

" https://powerline.readthedocs.org/en/latest/usage/other.html#vim-statusline
"
" instead of this deprecated vimscript plugin...:
" Plugin 'Lokaltog/vim-powerline
" ... we use this rewritten one in python:
" Plugin 'powerline/powerline'

" disable powerline if it is installed
let g:powerline_loaded = 1

" on arch linux, installed python-powerline
" and fix import error with
"let $PYTHONPATH="/usr/lib/python3.5/site-packages"


" lightweight alternative to powerline

Plugin 'bling/vim-airline'
let g:airline_detect_modified=1
let g:airline_detect_paste=1
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts=0


" TODO simple statusline like this
" http://www.blaenkdenum.com/posts/a-simpler-vim-statusline/


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" do some git from within vim

Plugin 'tpope/vim-fugitive'

nmap <Leader>gg <Leader>gs
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>ga :Gwrite<CR>
nnoremap <Leader>gc :Gcommit<CR>
nnoremap <Leader>gb :Gblame<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" show git status of lines on the left
"
Plugin 'airblade/vim-gitgutter'

let g:gitgutter_max_signs = 4000

nnoremap <C-G>g :GitGutterToggle<CR>



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" amazingly move everywhere

Plugin 'easymotion/vim-easymotion'

" prefix
map Ã¤ <Plug>(easymotion-prefix)



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" advanced searching

Plugin 'haya14busa/incsearch.vim'

"nnoremap Ã¶  <Plug>(incsearch-forward)
"nnoremap Ã  <Plug>(incsearch-backward)
"nnoremap gÃ¶ <Plug>(incsearch-stay)

nnoremap Ã¶ :call incsearch#call()<CR>
nnoremap Ã :call incsearch#call({'command': '?'})<CR>


" searching in multiple files
" install 'the_silver_searcher' package on the system
Plugin 'rking/ag.vim'

" always start in project root instead of cwd
let g:ag_working_path_mode="r"

nnoremap / :Ag<Space>
" search for word under cursor
nnoremap <Leader>* :Ag "\b<C-R><C-W>\b"<CR>:cw<CR>
" search for visual selection
xnoremap  / y:<c-u>Ag <C-R>=shellescape(expand(@"),1)<CR><CR>
"nnoremap  K :<c-u>Ag <c-r>=shellescape(expand("<cword>"),1)<cr>:copen<cr>


" % also matches HTML-tags/words etc
Plugin 'edsono/vim-matchit'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" fuzzy find files etc
" (like Sublimes 'Goto Anything')

Plugin 'kien/ctrlp.vim'

let g:ctrlp_map = '#'
let g:ctrlp_cmd = 'CtrlPMixed'
nnoremap <Leader>eo :CtrlPRoot<CR>
nnoremap <Leader>eb :CtrlPBuffer<CR>

" change appearance
"let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:10'
let g:ctrlp_match_window = 'top,order:ttb,min:1,max:10,results:10'

" custom key bindings when ctrlp prompt is open
let g:ctrlp_prompt_mappings = {
    \ 'PrtSelectMove("j")':   ['<c-j>', '<down>', '<tab>'],
    \ 'PrtSelectMove("k")':   ['<c-k>', '<up>', '<s-tab>'],
    \ 'PrtExpandDir()':       [],
    \ 'ToggleFocus()':        [],
    \ 'ToggleRegex()':        ['<c-r>', '<esc>r'],
    \ 'ToggleType(1)':        ['<c-l>', '<c-up>'],
    \ 'ToggleType(-1)':       ['<c-h>', '<c-down>'],
    \ 'PrtCurLeft()':         ['<c-b>', '<left>', '<c-^>'],
    \ 'PrtCurRight()':        ['<c-f>', '<right>'],
    \ }

" also find hidden files
let g:ctrlp_show_hidden = 1


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" file searching and much more
" http://bling.github.io/blog/2013/06/02/unite-dot-vim-the-plugin-you-didnt-know-you-need/
" TODO CONFIGURE AND TEST

"Plugin 'Shougo/vimproc.vim'
"Plugin 'Shougo/unite.vim'



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" file browser

Plugin 'scrooloose/nerdtree'

let NERDTreeWinSize=50
let NERDTreeQuitOnOpen=1

" show/hide nerdtree
noremap <silent> <Leader>t :NERDTreeToggle<CR>
" show nerdtree from current file
noremap <silent> <Leader>T :call SetCwdToFilePath() <bar> :NERDTreeCWD<CR>

" show/hide hidden files
let NERDTreeMapToggleHidden='.'



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" static code analysis

Plugin 'scrooloose/syntastic'

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = {
    \ "mode": "active",
    \ "active_filetypes": ["ruby", "php"],
    \ "passive_filetypes": ["python", "tex"] }

nnoremap <silent> <Leader>sc :SyntasticCheck<CR>
nnoremap <silent> <Leader>sr :SyntasticReset<CR>
nnoremap <silent> <Leader>st :SyntasticToggleMode<CR>
nnoremap <silent> <Leader>si :SyntasticInfo<CR>


" install linters on the system:
" - pylint
" - jslint
" - csslint (but phpcs also can do css)
" - phpcs (https://github.com/squizlabs/PHP_CodeSniffer)
let g:syntastic_php_checkers = ['phpcs', 'phplint', 'php']

" ignore these errors/warnings
let g:syntastic_quiet_messages = { "regex": [
   \ '\mMissing file doc comment',
   \ '\mLine indented incorrectly;.*'
   \ ] }



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" text editing

" make the 0 register a stack (yank/delete multiple things without worrying)
" lightweight alternative to yankring
Plugin 'maxbrunsfeld/vim-yankstack'
let g:yankstack_map_keys = 0
nmap <C-p> <Plug>yankstack_substitute_older_paste
nmap <C-n> <Plug>yankstack_substitute_newer_paste

" add and toggle comments with <Leader>c<space>
Plugin 'scrooloose/nerdcommenter'
" duplicate a line and comment out the first one
nmap <Leader>cd Y<Leader>ccp

" automagically add closing braces etc
Plugin 'Raimondi/delimitMate'

" add a ; at the end of a line
"Plugin 'lfilho/cosco.vim'
"inoremap <silent> <Esc><Enter> <Esc>:call cosco#commaOrSemiColon()<CR>A<Enter>
inoremap <silent> <Esc><Enter> <Esc>A;<Enter>

" add/change/delete quotes/braces/... and more
Plugin 'tpope/vim-surround'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" move visual selections around (even blocks)

Plugin 'shinokada/dragvisuals.vim'
vmap <expr> H  DVB_Drag('left')
vmap <expr> L  DVB_Drag('right')
vmap <expr> J  DVB_Drag('down')
vmap <expr> K  DVB_Drag('up')


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" change 'true' to 'false' etc. in the blink of an eye

Plugin 'vim-scripts/toggle_words.vim'

noremap <silent> -tw :ToggleWord<CR>

let g:toggle_words_dict = {
    \ 'css': [
    \     ["div", "span"],
    \     ["head", "body"],
    \     ['inline', 'block', 'none'],
    \     ['margin', 'padding'],
    \     ['relative', 'absolute', 'fixed', 'static'],
    \ ],
    \ 'html': [
    \     ["div", "span"],
    \     ["head", "body"],
    \     ["header", "footer"],
    \ ],
    \ 'tex': [
    \     ['chapter', 'section', 'subsection']
    \ ],
    \ '*': [
    \     ["0", "1"],
    \     ["black", "white"],
    \     ["dark", "light"],
    \     ["deep", "shallow"],
    \     ["get", "set"],
    \     ["head", "tail"],
    \     ["header", "footer"],
    \     ["left", "right"],
    \     ["love", "hate"],
    \     ["min", "max"],
    \     ["next", "previous"],
    \     ["on", "off"],
    \     ["open", "close"],
    \     ["red","orange","yellow","green","blue","purple"],
    \     ["strong", "weak"],
    \     ["this", "that"],
    \     ["top", "bottom"],
    \     ["true", "false"],
    \     ["up", "down"],
    \     ["width", "height"],
    \     ["yes", "no"],
    \ ],
    \ }


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Snippets

" snippet engine
Plugin 'SirVer/ultisnips'
let g:UltiSnipsExpandTrigger="<Esc>."
"let g:UltiSnipsListSnippets="<Esc>."
let g:UltiSnipsJumpForwardTrigger="<C-i>"
let g:UltiSnipsJumpBackwardTrigger="<C-o>"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "sflipsnippets"]


" snippet packs
Plugin 'honza/vim-snippets'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" advanced auto completion engine
"
" Remember: YCM is a plugin with a compiled component. If you update YCM using
" Vundle and the ycm_support_libs library APIs have changed (happens rarely),
" YCM will notify you to recompile it. You should then rerun the install
" process.

Plugin 'Valloric/YouCompleteMe'

let g:ycm_key_list_select_completion = ['<C-N>', '<Down>', '<Tab>']
let g:ycm_key_list_previous_completion=['<C-P>', '<Up>']


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" align stuff

Plugin 'junegunn/vim-easy-align'

" Start interactive EasyAlign in visual mode (e.g. vip-l=)
xmap -l <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. -lG=)
nmap -l <Plug>(EasyAlign)


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" auto format

Plugin 'Chiel92/vim-autoformat'

" install formatters on the system:
" - js-beautify (for HTML, CSS, JavaScript, JSON)

nnoremap <Leader>sa :Autoformat<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" handle trailing whitespace

Plugin 'vim-scripts/ShowTrailingWhiteSpace'

" (has a bug)
"Plugin 'vim-scripts/JumpToTrailingWhiteSpace'

Plugin 'vim-scripts/DeleteTrailingWhiteSpace'
" check for trailing whitespace when writing file
let g:DeleteTrailingWhitespace = 1
" delete trailing whitespace on demand for current line
nnoremap <silent> -dst :.DeleteTrailingWhitespace<CR>
vnoremap <silent> -dst :DeleteTrailingWhitespace<CR>
" delete trailing whitespace on demand for whole file
nnoremap <silent> -dsT :%DeleteTrailingWhitespace<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" LaTeX stuff

Plugin 'lervag/vimtex'

let g:vimtex_view_method='zathura'
"let g:vimtex_viewer_general='zathura'

" YouCompleteMe integration
if !exists('g:ycm_semantic_triggers')
    let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers.tex = [
    \ 're!\\[A-Za-z]*(ref|cite)[A-Za-z]*([^]]*])?{([^}]*,?)*',
    \ 're!\\includegraphics([^]]*])?{[^}]*',
    \ 're!\\(include|input){[^}]*'
    \ ]

nnoremap <Leader>bl :VimtexCompileToggle<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" scala stuff

Plugin 'derekwyatt/vim-scala'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Graphical undo tree

Plugin 'sjl/gundo.vim'

let g:gundo_preview_height = 25
let g:gundo_right = 1
let g:gundo_preview_bottom = 1
let g:gundo_return_on_revert = 0

nnoremap <Leader>ut :GundoToggle<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    " finish vundle
    call vundle#end()
    filetype plugin indent on


    " colorscheme must be set after vundle is done

    "colorscheme candycode
    "colorscheme dante
    "colorscheme jellybeans
    "colorscheme molokai
    "colorscheme meta5
    "colorscheme desertEx
    "colorscheme lucius
    "colorscheme onedark
    colorscheme badwolf

else

    " disable powerline if it is installed
    let g:powerline_loaded = 1

    " 'desert' is the fallback colorscheme
    colorscheme desert

endif



