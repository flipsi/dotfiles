[
    ///////////////////////////////
    // Sublime-Text Key Bindings //
    ///////////////////////////////

    // Author: Philipp Moers <soziflip@gmail.com>


    /////////////
    // General //
    /////////////

    // command palette
    { "keys": [":"], "command": "show_overlay", "args": {"overlay": "command_palette", "text": ""}, "context": [{"key": "setting.command_mode"}] },

    // enter insert mode also from visual mode
    { "keys": ["i"], "command": "enter_insert_mode", "context": [{"key": "setting.command_mode"}, { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": false } ] },

    // navigation with tab in overlay
    { "keys": ["tab"], "command": "move", "args": {"by": "lines", "forward": true}, "context": [{ "key": "overlay_visible", "operator": "equal", "operand": true } ] },
    { "keys": ["shift+tab"], "command": "move", "args": {"by": "lines", "forward": false}, "context": [{ "key": "overlay_visible", "operator": "equal", "operand": true } ] },

    // python repl (console)
    { "keys": ["ctrl+alt+i"], "command": "show_panel", "args": {"panel": "console", "toggle": true} },
    { "keys": ["escape"], "command": "focus_group", "args": { "group": 0 }, "context": [{ "key": "panel_visible", "operator": "equal", "operand": true } ] },
    // { "keys": ["ctrl+n"], "command": "move", "args": {"by": "lines", "forward": true}, "context": [{ "key": "panel_visible", "operator": "equal", "operand": true } ] },
    // { "keys": ["ctrl+p"], "command": "move", "args": {"by": "lines", "forward": false}, "context": [{ "key": "panel_visible", "operator": "equal", "operand": true } ] },

    // hide/show build panel
    { "keys": ["ctrl+alt+o"], "command": "show_panel", "args": {"panel": "output.exec"} },
    { "keys": ["ctrl+alt+o"], "command": "hide_panel", "context": [{"key": "panel_visible"}]},

    // project management
    { "keys": ["ctrl+space", "p", "p"], "command": "prompt_select_workspace" },
    { "keys": ["ctrl+space", "p", "c"], "command": "close_workspace" },

    // run arbitrary shell command
    // { "keys": ["ctrl+alt+s"], "command": "shell_prompt"},
    { "keys": ["ctrl+space", "s"], "command": "shell_command"},

    // open terminal in directory of current file/project
    { "keys": ["ctrl+space", "o"], "command": "open_terminal" },
    { "keys": ["ctrl+space", "O"], "command": "open_terminal_project_folder" },

    // git
    { "keys": ["ctrl+space", "g"], "command": "git_status" },

    { "keys": ["ctrl+shift+ü"], "command": "view_in_browser", "args": { "browser": "chrome" } },


    ///////////
    // View  //
    ///////////

    // scroll up and down
    { "keys": ["alt+j"], "command": "scroll_lines", "args": {"amount": -15} },
    { "keys": ["alt+k"], "command": "scroll_lines", "args": {"amount": 15} },
    // (scroll_lines_fixed is a plugin that keeps the cursor where it is when moving the viewport)
    // { "keys": ["alt+space"], "command": "scroll_lines_fixed", "args": {"amount": -15} },
    // { "keys": ["alt+m"], "command": "scroll_lines_fixed", "args": {"amount": 15} },
    { "keys": ["ctrl+b"], "command": "move", "args": {"by": "pages", "forward": false} },
    { "keys": ["ctrl+f"], "command": "move", "args": {"by": "pages", "forward": true} },
    { "keys": ["alt+right"], "command": "scroll_width", "args": {"amount": 15 } },
    { "keys": ["alt+left"], "command": "scroll_width", "args": {"amount": -15 } },

    // zoom
    { "keys": ["z", "i"], "command": "increase_font_size", "context": [{"key": "setting.command_mode"}] },
    { "keys": ["z", "o"], "command": "decrease_font_size", "context": [{"key": "setting.command_mode"}] },

    // menu bar at the top
    { "keys": ["ctrl+g", "u"],  "command": "toggle_menu" },

    // rulers
    { "keys": ["ctrl+g", "r"],  "command": "set_setting", "args": {"setting": "rulers", "value": [80, 100]}},
    { "keys": ["ctrl+g", "R"],  "command": "set_setting", "args": {"setting": "rulers", "value": []}},

    // side bars
    { "keys": ["ctrl+g", "S"], "command": "toggle_side_bar" },
    { "keys": ["ctrl+g", "M"], "command": "toggle_minimap" },

    // line numbers
    { "keys": ["ctrl+g", "l"], "command": "toggle_setting", "args": {"setting": "line_numbers"} },

    // relative line numbers
    {"keys": ["ctrl+g", "L"], "command": "toggle_setting", "args": {"setting": "vintage_lines.force_mode"}},

    // word wrap
    { "keys": ["ctrl+g", "w"], "command": "toggle_setting", "args": {"setting": "word_wrap"} },

    // spell check
    { "keys": ["ctrl+g", "s"], "command": "toggle_setting", "args": {"setting": "spell_check"} },

    // whitespaces
    { "keys": ["ctrl+g", "a"], "command": "set_setting", "args": {"setting": "draw_white_space", "value": "all" }},
    { "keys": ["ctrl+g", "A"], "command": "set_setting", "args": {"setting": "draw_white_space", "value": "selection" }},

    // fold
    { "keys": ["ctrl+g", "-"], "command": "fold" },
    { "keys": ["ctrl+g", "+"], "command": "unfold" },


    ////////////////////////////////
    // Goto Anyting, Search, etc. //
    ////////////////////////////////

    // navigate through last positions
    { "keys": ["ctrl+o"], "command": "jump_back" },
    { "keys": ["ctrl+i"], "command": "jump_forward" },

    // navigate to last edit
    // (there seems to be no plugin for sublime text 3, maybe i will write one)
    // { "keys": ["ctrl+space", "."], "command": "goto_last_edit" },


    // FileBrowser
    { "keys": ["alt+i"],        "command": "dired", "args": { "immediate": true, "single_pane": true, "other_group": "left", "project": false } },
    { "keys": ["alt+shift+i"],  "command": "dired", "args": { "immediate": false, "single_pane": true, "other_group": "left", "project": true } },
    { "keys": ["alt+i"],        "command": "dired_jump", "context": [{ "key": "selector", "operator": "equal", "operand": "text.dired" }, { "key": "setting.dired_rename_mode", "operand": false } ] },
    { "keys": ["g", "g"],       "command": "dired_move", "args": {"to": "bof"}, "context": [{ "key": "selector", "operator": "equal", "operand": "text.dired" } ] },
    { "keys": ["G"],            "command": "dired_move", "args": {"to": "eof"}, "context": [{ "key": "selector", "operator": "equal", "operand": "text.dired" } ] },
    { "keys": ["f"],            "command": "dired_goto", "context": [{ "key": "selector", "operator": "equal", "operand": "text.dired" }, { "key": "setting.dired_rename_mode", "operand": false } ] },
    { "keys": ["s"],            "command": "dired_mark", "args": { "mark": "toggle" }, "context": [{ "key": "selector", "operator": "equal", "operand": "text.dired" }, { "key": "setting.dired_rename_mode", "operand": false } ] },
    { "keys": ["enter"],        "command": "dired_select", "args": {"and_close": true}, "context": [{ "key": "selector", "operator": "equal", "operand": "text.dired" }, { "key": "setting.dired_rename_mode", "operand": false } ] },
    { "keys": ["d", "d"],       "command": "dired_copy_files", "args":{"cut": true}, "context": [{ "key": "selector", "operator": "equal", "operand": "text.dired" }, { "key": "setting.dired_rename_mode", "operand": false } ] },
    { "keys": ["y", "y"],       "command": "dired_copy_files", "context": [{ "key": "selector", "operator": "equal", "operand": "text.dired" }, { "key": "setting.dired_rename_mode", "operand": false } ] },
    { "keys": ["p", "p"],       "command": "dired_paste_files", "context": [{ "key": "selector", "operator": "equal", "operand": "text.dired" }, { "key": "setting.dired_rename_mode", "operand": false } ] },
    { "keys": ["x", "r"],       "command": "dired_delete", "context": [{ "key": "selector", "operator": "equal", "operand": "text.dired" }, { "key": "setting.dired_rename_mode", "operand": false } ] },
    { "keys": ["x", "t"],       "command": "dired_delete", "args": {"trash": true}, "context": [{ "key": "selector", "operator": "equal", "operand": "text.dired" }, { "key": "setting.dired_rename_mode", "operand": false } ] },
    { "keys": ["c", "w"],       "command": "dired_rename", "context": [{ "key": "selector", "operator": "equal", "operand": "text.dired" }, { "key": "setting.dired_rename_mode", "operand": false } ] },
    { "keys": ["a", "d"],       "command": "dired_create", "args": { "which": "directory" }, "context": [{ "key": "selector", "operator": "equal", "operand": "text.dired" }, { "key": "setting.dired_rename_mode", "operand": false } ] },
    { "keys": ["a", "f"],       "command": "dired_create", "args": { "which": "file" }, "context": [{ "key": "selector", "operator": "equal", "operand": "text.dired" }, { "key": "setting.dired_rename_mode", "operand": false } ] },
    { "keys": ["z", "h"],       "command": "dired_toggle_hidden_files", "context": [{ "key": "selector", "operator": "equal", "operand": "text.dired" }, { "key": "setting.dired_rename_mode", "operand": false } ] },
    { "keys": ["Ö"],            "command": "dired_find_in_files", "context": [{ "key": "selector", "operator": "equal", "operand": "text.dired" }, { "key": "setting.dired_rename_mode", "operand": false } ] },
    { "keys": ["m"],            "command": "dired_edit_jump_point", "context": [{ "key": "selector", "operator": "equal", "operand": "text.dired" }, { "key": "setting.dired_rename_mode", "operand": false } ] },
    { "keys": ["ä"],            "command": "dired_jump", "context": [{ "key": "selector", "operator": "equal", "operand": "text.dired" }, { "key": "setting.dired_rename_mode", "operand": false } ] },

    // mark line in vim style with m <char>
    // and jump there with Ä <char> (because that's where original ' is located on an english keyboard)
    { "keys": ["Ä", "<character>"], "command": "vi_select_bookmark", "context": [{ "key": "setting.command_mode" } , { "key": "selector", "operator": "not_equal", "operand": "text.dired"  } ] },

    // vim registers
    { "keys": ["\"", "<character>"], "command": "set_register", "context": [{"key": "setting.command_mode"}] },

    // goto anything (find tab)
    // ... # to go to keyword
    // ... : to go to line
    // ... @ to go to function or section
    // { "keys": ["alt+w"], "command": "show_overlay", "args": {"overlay": "goto", "show_files": true}},
    { "keys": ["#"], "command": "show_overlay", "args": {"overlay": "goto", "show_files": true}, "context": [{"key": "setting.command_mode"}] },
    { "keys": ["alt+#"], "command": "show_overlay", "args": {"overlay": "goto", "show_files": true}},
    { "keys": ["@"], "command": "show_overlay", "args": {"overlay": "goto", "text": "@"}, "context": [{"key": "setting.command_mode"}] },
    // if a mark is not set and you goto it, cursor ist lost. hit this and enter to get it back

    // search for words
    { "keys": ["ö"], "command": "show_panel", "args": {"panel": "incremental_find", "reverse": false}, "context": [{"key": "setting.command_mode"}]  },
    { "keys": ["Ö"], "command": "show_panel", "args": {"panel": "incremental_find", "reverse": true}, "context": [{"key": "setting.command_mode"}]  },
    // search in multiple files
    { "keys": ["/"], "command": "show_panel", "args": {"panel": "find_in_files"},  "context": [{"key": "setting.command_mode"}, { "key": "selector", "operator": "not_equal", "operand": "text.dired"  }]  },


    //////////////////////////////
    // Tab and Pane Management  //
    //////////////////////////////

    // close tab
    { "keys": ["q"], "command": "close", "context": [{"key": "setting.command_mode"}] },

    // reopen tab
    { "keys": ["ctrl+u"], "command": "reopen_last_file" },

    // navigate through tabs
    { "keys": ["alt+p"], "command": "prev_view" },
    { "keys": ["alt+n"], "command": "next_view" },
    // move tabs
    { "keys": ["alt+shift+p"], "command": "move_tab", "args": { "position": "-1" } },
    { "keys": ["alt+shift+n"], "command": "move_tab", "args": { "position": "+1" } },

    // switch to LRU tab
    // { "keys": ["#"], "command": "next_view_in_stack", "context": [{"key": "setting.command_mode"}] },
    // { "keys": ["alt+#"], "command": "next_view_in_stack" },
    // { "keys": ["alt+shift+#"], "command": "prev_view_in_stack" },
    { "keys": ["alt+space"], "command": "next_view_in_stack" },
    { "keys": ["alt+shift+space"], "command": "prev_view_in_stack" },

    // split window in groups
    {"keys": ["ctrl+w", "1"], "command": "set_layout", "args": {"cols": [0.0, 1.0], "rows": [0.0, 1.0], "cells": [[0, 0, 1, 1]] } },
    {"keys": ["ctrl+w", "2"], "command": "set_layout", "args": {"cols": [0.0, 0.5, 1.0], "rows": [0.0, 1.0], "cells": [[0, 0, 1, 1], [1, 0, 2, 1]] } },
    {"keys": ["ctrl+w", "4"], "command": "set_layout", "args": {"cols": [0.0, 0.38, 1.0], "rows": [0.0, 1.0], "cells": [[0, 0, 1, 1], [1, 0, 2, 1]] } },
    {"keys": ["ctrl+w", "6"], "command": "set_layout", "args": {"cols": [0.0, 0.66, 1.0], "rows": [0.0, 1.0], "cells": [[0, 0, 1, 1], [1, 0, 2, 1]] } },
    {"keys": ["ctrl+w", "3"], "command": "set_layout", "args": {"cols": [0.0, 0.33, 0.66, 1.0], "rows": [0.0, 1.0], "cells": [[0, 0, 1, 1], [1, 0, 2, 1], [2, 0, 3, 1]] } },
    {"keys": ["ctrl+w", "7"], "command": "set_layout", "args": {"cols": [0.0, 1.0], "rows": [0.0, 0.5, 1.0], "cells": [[0, 0, 1, 1], [0, 1, 1, 2]] } },
    {"keys": ["ctrl+w", "8"], "command": "set_layout", "args": {"cols": [0.0, 1.0], "rows": [0.0, 0.3, 1.0], "cells": [[0, 0, 1, 1], [0, 1, 1, 2]] } },
    {"keys": ["ctrl+w", "9"], "command": "set_layout", "args": {"cols": [0.0, 1.0], "rows": [0.0, 0.33, 0.66, 1.0], "cells": [[0, 0, 1, 1], [0, 1, 1, 2], [0, 2, 1, 3]] } },
    {"keys": ["ctrl+w", "5"], "command": "set_layout", "args": {"cols": [0.0, 0.5, 1.0], "rows": [0.0, 0.5, 1.0], "cells": [[0, 0, 1, 1], [1, 0, 2, 1], [0, 1, 1, 2], [1, 1, 2, 2] ] } },
    // move tab to other group
    { "keys": ["ctrl+w", "ctrl+shift+1"], "command": "move_to_group", "args": { "group": 0 } },
    { "keys": ["ctrl+w", "ctrl+shift+2"], "command": "move_to_group", "args": { "group": 1 } },
    { "keys": ["ctrl+w", "ctrl+shift+3"], "command": "move_to_group", "args": { "group": 2 } },
    { "keys": ["ctrl+w", "ctrl+shift+4"], "command": "move_to_group", "args": { "group": 3 } },

    // reset panes
    { "keys": ["ctrl+w", "ctrl+w"], "command": "set_layout", "args": {"cols": [0.0, 1.0], "rows": [0.0, 1.0], "cells": [[0, 0, 1, 1]] } },

    // Origami: move focus
    { "keys": ["ctrl+w", "j"], "command": "travel_to_pane", "args": {"direction": "down"} },
    { "keys": ["ctrl+w", "k"], "command": "travel_to_pane", "args": {"direction": "up"} },
    { "keys": ["ctrl+h"],      "command": "travel_to_pane", "args": {"direction": "left"} },
    { "keys": ["ctrl+w", "h"], "command": "travel_to_pane", "args": {"direction": "left"} },
    { "keys": ["ctrl+l"],      "command": "travel_to_pane", "args": {"direction": "right"} },
    { "keys": ["ctrl+w", "l"], "command": "travel_to_pane", "args": {"direction": "right"} },

    // Origami: move tab to another pane
    // (creates a new pane if there is no other)
    { "keys": ["ctrl+w", "K"], "command": "carry_file_to_pane", "args": {"direction": "up"} },
    { "keys": ["ctrl+w", "L"], "command": "carry_file_to_pane", "args": {"direction": "right"} },
    { "keys": ["ctrl+w", "J"], "command": "carry_file_to_pane", "args": {"direction": "down"} },
    { "keys": ["ctrl+w", "H"], "command": "carry_file_to_pane", "args": {"direction": "left"} },

    // Origami: new view into file in another pane
    { "keys": ["ctrl+w", "ctrl+k"], "command": "clone_file_to_pane", "args": {"direction": "up"} },
    { "keys": ["ctrl+w", "ctrl+l"], "command": "clone_file_to_pane", "args": {"direction": "right"} },
    { "keys": ["ctrl+w", "ctrl+j"], "command": "clone_file_to_pane", "args": {"direction": "down"} },
    { "keys": ["ctrl+w", "ctrl+h"], "command": "clone_file_to_pane", "args": {"direction": "left"} },

    // Origami: create pane with file
    { "keys": ["ctrl+w", "alt+k"], "command": "create_pane_with_file", "args": {"direction": "up"} },
    { "keys": ["ctrl+w", "alt+l"], "command": "create_pane_with_file", "args": {"direction": "right"} },
    { "keys": ["ctrl+w", "alt+j"], "command": "create_pane_with_file", "args": {"direction": "down"} },
    { "keys": ["ctrl+w", "alt+h"], "command": "create_pane_with_file", "args": {"direction": "left"} },

    // Origami: destroy pane
    { "keys": ["Q"], "command": "destroy_pane", "args": {"direction": "self"}, "context": [{"key": "setting.command_mode"}] },

    // Origami: zoom
    { "keys": ["ctrl+w", "z"], "command": "zoom_pane", "args": {"fraction": 0.9} },
    { "keys": ["ctrl+w", "Z"], "command": "unzoom_pane", "args": {} },


    ////////////////////////////
    // Movement and Selection //
    ////////////////////////////

    // move down faster with gj and gk
    // (this is my own plugin 'MoveMore')
    { "keys": ["g", "j"], "command": "move_more", "args": {"amount":  11 }, "context": [{"key": "setting.command_mode"}] },
    { "keys": ["g", "k"], "command": "move_more", "args": {"amount": -11 }, "context": [{"key": "setting.command_mode"}] },

    // move cursor left or right
    { "keys": ["alt+h"], "command": "move", "args": {"by": "characters", "forward": false} },
    { "keys": ["alt+l"], "command": "move", "args": {"by": "characters", "forward": true} },
    { "keys": ["alt+b"], "command": "move", "args": {"by": "words", "forward": false} },
    { "keys": ["alt+f"], "command": "move", "args": {"by": "words", "forward": true } },

    // repeat movement (e.g. after f<character>)
    { "keys": [","], "command": "set_repeat_move_to_character_motion", "context": [{"key": "setting.command_mode"}] },
    { "keys": [";"], "command": "set_repeat_move_to_character_motion", "args": {"reverse": true}, "context": [{"key": "setting.command_mode"}] },

    // emacs bol/eol
    { "keys": ["ctrl+a"], "command": "move_to", "args": {"to": "bol", "extend": false} },
    { "keys": ["ctrl+e"], "command": "move_to", "args": {"to": "eol", "extend": false} },
    { "keys": ["ctrl+a"], "command": "set_motion", "args": {"motion": "move_to", "motion_args": {"to": "bol", "extend": true }},
        "context": [{ "key": "setting.command_mode"}, { "key": "vi_has_repeat_digit", "operand": false} ] },
    { "keys": ["ctrl+e"], "command": "set_motion", "args": {"motion": "vi_move_to_hard_eol", "motion_args": {"repeat": 1, "extend": true}, "inclusive": true, "clip_to_line": true },
        "context": [{"key": "setting.command_mode"}] },

    // move to braces
    { "keys": ["ctrl+k", "ctrl+k"], "command": "move_to", "args": {"to": "brackets"} },

    // acejump (like easymotion) to magically jump everywhere
    { "keys": ["ä", "w"], "command": "ace_jump_word", "context": [{"key": "setting.command_mode"}] },
    { "keys": ["ä", "b"], "command": "ace_jump_word", "context": [{"key": "setting.command_mode"}] },
    { "keys": ["ä", "s"], "command": "ace_jump_char", "context": [{"key": "setting.command_mode"}] },
    { "keys": ["ä", "j"], "command": "ace_jump_line", "context": [{"key": "setting.command_mode"}] },
    { "keys": ["ä", "k"], "command": "ace_jump_line", "context": [{"key": "setting.command_mode"}] },
    // { "keys": ["ä", "s"], "command": "ace_jump_select", "context": [{"key": "setting.command_mode"}, { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": false } ] },
    // { "keys": ["ä", "m"], "command": "ace_jump_add_cursor", "context": [{"key": "setting.command_mode"}] },
    // { "keys": ["ä", "e"], "command": "ace_jump_after", "context": [{"key": "setting.command_mode"}] },

    // markandmove (multi cursoring with keyboard)
    // { "keys": ["ctrl+m"], "command": "mark_and_move_save" },
    // { "keys": ["ctrl+shift+m"], "command": "mark_and_move_recall" },
    { "keys": ["ctrl+m"], "command": "mark_and_move_do_it_all" },
    // multicursoring from multiple line selection
    { "keys": ["ctrl+v"], "command": "split_selection_into_lines", "context": [{"key": "setting.command_mode"}, { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": false } ] },

    // select all
    { "keys": ["ctrl+alt+a"], "command": "select_all" },

    // select word
    { "keys": ["ctrl+j"], "command": "find_under_expand" },
    // select  next and leave this out
    { "keys": ["ctrl+alt+j"], "command": "find_under_expand_skip" },
    // select all of these words
    { "keys": ["ctrl+space", "ctrl+j"], "command": "find_all_under" },

    // move to eol with l instead of $ (after d or c or y)
    { "keys": ["l"], "command": "set_motion", "args": {"motion": "vi_move_to_hard_eol", "motion_args": {"repeat": 1, "extend": true}, "inclusive": true, "clip_to_line": true }, "context": [{"key": "setting.command_mode"}, {"key": "vi_action", "operand": "vi_delete"} ] },
    { "keys": ["l"], "command": "set_motion", "args": {"motion": "vi_move_to_hard_eol", "motion_args": {"repeat": 1, "extend": true}, "inclusive": true, "clip_to_line": true }, "context": [{"key": "setting.command_mode"}, {"key": "vi_action", "operand": "enter_insert_mode"} ] },
    { "keys": ["l"], "command": "set_motion", "args": {"motion": "vi_move_to_hard_eol", "motion_args": {"repeat": 1, "extend": true}, "inclusive": true, "clip_to_line": true }, "context": [{"key": "setting.command_mode"}, {"key": "vi_action", "operand": "vi_copy"} ] },

    // jump to matching html tag
    { "keys": ["ä", "t"], "args": {"action": "matching_pair"}, "command": "run_emmet_action", "context": [{ "key": "emmet_action_enabled.matching_pair", "key": "setting.command_mode" }] },


    //////////////////
    // Text Editing //
    //////////////////

    // save file
    { "keys": ["alt+s"], "command": "save" },

    // undo and redo
    { "keys": ["alt+u"], "command": "undo" },
    { "keys": ["alt+shift+u"], "command": "redo" },

    // auto completion
    { "keys": ["alt+."], "command": "auto_complete" },
    { "keys": ["tab"], "command": "move", "args": {"by": "lines", "forward": true}, "context": [{ "key": "auto_complete_visible" }] },
    { "keys": ["shift+tab"], "command": "move", "args": {"by": "lines", "forward": false}, "context": [{ "key": "auto_complete_visible" }] },
    { "keys": ["alt+."], "command": "commit_completion", "context": [{ "key": "auto_complete_visible" }] },

    // delete
    // { "keys": ["delete"], "command": "set_action_motion", "args": {"action": "vi_left_delete", "motion": null } },
    // { "keys": ["ctrl+h"], "command": "left_delete" },
    { "keys": ["ctrl+d"], "command": "set_action_motion", "args": {"action": "vi_right_delete", "motion": null } },
    { "keys": ["alt+backspace"], "command": "delete_word", "args": { "forward": false } },
    { "keys": ["alt+d"], "command": "delete_word", "args": { "forward": true } },

    // replace/substitute
    { "keys": ["alt+ö"], "command": "show_panel", "args": {"panel": "replace", "reverse": false} },

    // indent
    { "keys": [">"], "command": "indent", "context": [{"key": "setting.command_mode"}] },
    { "keys": ["<"], "command": "unindent", "context": [{"key": "setting.command_mode"}] },

    // auto align things
    // { "keys": ["-", "l"], "command": "align_tab", "args" : { "user_input" : "=/f" }, "context": [{"key": "setting.command_mode"}] },
    { "keys": ["-", "l"], "command": "align_tab", "context": [{"key": "setting.command_mode"}] },

    // change case
    { "keys": ["g", "U"], "command": "upper_case", "context": [{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": false }] },
    { "keys": ["g", "u"], "command": "lower_case", "context": [{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": false }] },
    { "keys": ["g", "t"], "command": "title_case", "context": [{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": false }] },

    // add new line
    { "keys": ["alt+o"], "command": "run_macro_file", "args": {"file": "Packages/Default/Add Line.sublime-macro"} },
    { "keys": ["alt+shift+o"], "command": "run_macro_file", "args": {"file": "Packages/Default/Add Line Before.sublime-macro"} },
    // add new line
    { "keys": ["alt+enter"],   "command": "append_semi_colon", "args": {"enter_new_line": "true"} },
    // duplicate line
    { "keys": ["alt+shift+d"], "command": "duplicate_line" },
    // move line up and down
    { "keys": ["alt+shift+k"], "command": "swap_line_up" },
    { "keys": ["alt+shift+j"], "command": "swap_line_down" },
    { "keys": ["-", "k"], "command": "swap_line_up", "context": [{"key": "setting.command_mode"}] },
    { "keys": ["-", "j"], "command": "swap_line_down", "context": [{"key": "setting.command_mode"}] },
    // join lines with J
    // { "keys": ["ctrl+j"], "command": "join_lines" },

    // toggle single or double quotes
    { "keys": ["-", "q"], "command": "change_quotes", "context": [{"key": "setting.command_mode"}] },

    // toggle comment
    { "keys": ["ctrl+ö"], "command": "toggle_comment", "args": { "block": false } },
    { "keys": ["ctrl+shift+ö"], "command": "toggle_comment", "args": { "block": true } },

    // sort
    { "keys": ["f9"], "command": "sort_lines", "args": {"case_sensitive": false} },
    { "keys": ["shift+f9"], "command": "sort_lines", "args": {"case_sensitive": true} },

    // transpose characters, words, etc. (swap)
    { "keys": ["ctrl+t"], "command": "transpose_word" },
    // { "keys": ["ctrl+t"], "command": "transpose_character" },

    // toggle words (false/false etc.)
    { "keys": ["-", "t", "w"], "command": "toggle_word", "context": [{"key": "setting.command_mode"}] },

    // change an html tag
    { "keys": ["c", "a", "t"], "command": "rename_tag", "context": [{ "key": "emmet_action_enabled.rename_tag", "key": "setting.command_mode"}, { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": false } ] },

    // HTML Prettify (Auto code style for HTML, CSS, JavaScript, JSON)
    { "keys": ["-", "p"], "command": "htmlprettify", "context": [{"key": "setting.command_mode"}] },

    // increment and decrement numbers
    { "keys": ["+"],      "args": {"action": "increment_number_by_1"}, "command": "run_emmet_action", "context": [ {"key": "emmet_action_enabled.increment_number_by_1"}, {"key": "setting.command_mode"} ] },
    { "keys": ["-", "-"], "args": {"action": "decrement_number_by_1"}, "command": "run_emmet_action", "context": [ {"key": "emmet_action_enabled.decrement_number_by_1"}, {"key": "setting.command_mode"} ] },

    // Super Calculator
    { "keys": ["-", "c"], "command": "super_calculator", "context": [{"key": "setting.command_mode"}] },

    // Macros
    { "keys": ["ctrl+space", "M", "<character>"], "command": "vi_begin_record_macro", "context": [{"key": "setting.command_mode"}] },
    { "keys": ["ctrl+space", "M"],                "command": "vi_end_record_macro", "context": [{"key": "setting.command_mode"}, {"key": "is_recording_macro"}] },
    { "keys": ["ctrl+space", "m", "<character>"], "command": "vi_replay_macro", "context": [{"key": "setting.command_mode"}] },


    ///////////
    // Build //
    ///////////

    { "keys": ["f7"], "command": "build" },
    { "keys": ["ctrl+space", "b", "b"], "command": "build" },
    { "keys": ["ctrl+alt+b"], "command": "build" },
    { "keys": ["ctrl+space", "b", "p"], "command": "build_parts" },
    { "keys": ["ctrl+space", "b", "v"], "command": "build", "context": [{"key": "build_fake", "operator":"equal", "operand":true}] },

    // find errors (debugging)
    { "keys": ["ctrl+alt+n"], "command": "next_result" },
    { "keys": ["ctrl+alt+shift+n"], "command": "prev_result" },

    // SublimeREPL
    { "keys": ["ctrl+f7"], "command": "repl_transfer_current", "args": {"scope": "file"}},


    ////////////////////////////
    // Sublimerge (Diff Tool) //
    ////////////////////////////

    // { "keys": ["ctrl+g", "m"], "command": "sublimerge"},
    // { "keys": ["ctrl+g", "i"], "command": "sublimerge_toggle_edit"},

    // navigate through differences
    // { "keys": ["ctrl+g", "n"], "command": "sublimerge_go_down"},
    // { "keys": ["ctrl+g", "N"], "command": "sublimerge_go_up"},

    // choose left or right file to modify other
    // { "keys": ["ctrl+g", "l"], "command": "sublimerge_merge_left"},
    // { "keys": ["ctrl+g", "h"], "command": "sublimerge_merge_right"},
    // { "keys": ["ctrl+g", "L"], "command": "sublimerge_merge_left", "args": {"merge_all": true}},
    // { "keys": ["ctrl+g", "H"], "command": "sublimerge_merge_right", "args": {"merge_all": true}},


    /////////////////////////
    // JavaScript Refactor //
    /////////////////////////

    { "keys": ["g", "d"], "command": "gotodefinition", "context": [{"key": "setting.command_mode"}] },


    /////////////////
    // Workarounds //
    /////////////////

    // overwritten by "Super Calculator"
    { "keys": ["alt+c"], "command": "toggle_case_sensitive", "context": [{ "key": "setting.is_widget", "operator": "equal", "operand": true } ] }

]
